package myarchive;


import org.junit.*;
import wsiarchive.*;


public class RedundantArchiveTest extends de.tuebingen.informatik.Test {
    //Beispiele für Teilarchive
    limitedArchive la1 = new limitedArchive("Teilarchiv 1", new WORM("Worm"), 200);
    limitedArchive la2 = new limitedArchive("Teilarchiv 2", new WORM("Worm"), 300);
    limitedArchive la3 = new limitedArchive("Teilarchiv 3", new WORM("Worm"), 200);

    limitedArchive la4 = new limitedArchive("Teilarchiv 4", new WORM("Worm"), 300);
    
    //Beispiel für ein overflow-archive
    // Quorum von 2
    IArchiveList al1 = new PairArchiveList(la1, new PairArchiveList(la2, new PairArchiveList(la3, new EmptyArchiveList())));
    RedundantArchive ra1 = new RedundantArchive("Test 1", al1, 2);
    
    // Quorum von 2
    IArchiveList al2 = new PairArchiveList(la1, new PairArchiveList(la2, new PairArchiveList(la3, new PairArchiveList(la4, new EmptyArchiveList()))));
    RedundantArchive ra2 = new RedundantArchive("Test 1", al2, 2);
    
        
    // Quorum von 1
    IArchiveList al3 = new PairArchiveList(la1, new PairArchiveList(la2, new PairArchiveList(la3, new PairArchiveList(la4, new EmptyArchiveList()))));
    RedundantArchive ra3 = new RedundantArchive("Test 1", al3, 1);
    
    // Quorum von 2
    IArchiveList al4 = new PairArchiveList(la1, new PairArchiveList(la1, new PairArchiveList(la2, new PairArchiveList(la3, new EmptyArchiveList()))));
    RedundantArchive ra4 = new RedundantArchive("Test 1", al4, 2);
    
    //Beispiele für Items
    Item i1 = new Item("Item 1", 200);
    Item i2 = new Item("Item 2", 300);
    Item i3 = new Item("Item 3", 400);
    Item i4 = new Item("Item 4", 100);
    
    //Itemlisten
    IItemList il2 = new PairItemList(i1, new PairItemList(i2, new PairItemList(i3, new PairItemList(i4, new EmptyItemList()))));
    IItemList il1 = new PairItemList(i1, new PairItemList(i2, new EmptyItemList()));
    IItemList il3 = new PairItemList(i1, new EmptyItemList());
    IItemList il4 = new PairItemList(i2, new EmptyItemList());
    IItemList il5 = new PairItemList(i4, new PairItemList(i4, new EmptyItemList()));
    IItemList il6 = new PairItemList(i1, new PairItemList(i4, new EmptyItemList()));
    
        
    //überprüfen ob ein Result vom Typ OKPutResult ist
    public boolean isOKPutResult(IPutResult result) {
        return (result instanceof OKPutResult);
    }
    //überprüfen ob alle Resultats vom Typ OkPutResultList sind
    public boolean isOKPutResultList(wsiarchive.IPutResultList resultlist) {
        if (resultlist instanceof wsiarchive.EmptyPutResultList) {
            return true;
        }
        else {
            return this.isOKPutResult(((wsiarchive.PairPutResultList) resultlist).getFirst()) &&
                   this.isOKPutResultList(((wsiarchive.PairPutResultList) resultlist).getRest());
        }
    }
    
    //überprüfen ob die ItemId vom Typ RedunantItemID ist
    public boolean isRedundantItemID(IItemId item) {
        return (item instanceof RedundantItemID);
    }
    
    
    //Name eines Archives zurückgeben
    @Test
    public void getName() {
        checkExpect(ra1.getName(), "Test 1");
    }
    
    //Quorum eines Archives zurückgeben
    @Test
    public void getQuorum() {
        checkExpect(ra1.getQuorum(), 2);
    }
    
    //Ein Item in das Archiv übergeben
    @Test
    public void put() {
        IPutResult result1 = ra1.put(i1);
        checkExpect(this.isOKPutResult(result1), true);
        checkExpect(this.isRedundantItemID(((OKPutResult) result1).getId()), true);
        
        // ra1 ist schon befüllt deshalb passt i2 nirgends mehr rein
        IPutResult result2 = ra1.put(i2);
        checkExpect(this.isOKPutResult(result2), false);
    }
    
    //Ein weiteres Item in das Archiv übergeben
    @Test
    public void put2() {
        IPutResult result3 = ra2.put(i2);
        checkExpect(this.isOKPutResult(result3), true);
        checkExpect(this.isRedundantItemID(((OKPutResult) result3).getId()), true);
    }
    
        
    //Ein weiteres Item in das Archiv übergeben
    // nun aber ist die quorum zu hoch
    @Test
    public void put3() {
        IPutResult result3 = ra4.put(i2);
        checkExpect(this.isOKPutResult(result3), false);
    }
    
    
    //mehrere ITems in das Archiv übergeben
    @Test
    public void putMultiple2() {
    }
    
    //mehrere ITems in das Archiv übergeben
    @Test
    public void putMultiple1() {
    }
    
        //mehrere ITems in das Archiv übergeben
    @Test
    public void putMultiple3() {
    }
    
    //ein Item aus dem Archiv lesen
    @Test
    public void get() {
        OKPutResult putresult = (OKPutResult) ra1.put(i1);
        checkExpect(this.isOKPutResultList(((RedundantItemID) putresult.getId()).getList().toWSIPutResultList()), true);
        checkExpect(ra1.get(putresult.getId()), new ItemResult(i1));
    }
    
    @Test
    public void getPutAble(){
        checkExpect(ra1.getPutAble(il3), il3);
        checkExpect(ra1.getPutAble(il4), new EmptyItemList());
        checkExpect(ra2.getPutAble(il4), il4);
    }
}
