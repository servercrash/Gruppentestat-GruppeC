package myarchive;

import org.junit.*;
import wsiarchive.*;

import java.util.Random;



public class PairArchiveAndPutResultListTest extends de.tuebingen.informatik.Test {

    // Erstelle eine neue liste
    IArchiveAndPutResultList ea = new EmptyArchiveAndPutResultList();
    
    // quasie leeres archive mit cache konstrukt
    IArchive a1 = new WORM("string");
    IPutResultList r1 = new EmptyPutResultList();
    IArchiveAndPutResultList ia1 = new PairArchiveAndPutResultList(a1, r1, ea);
    
    // some random generators :)
    public IItemId getRandomId() {
        return ((OKPutResult) new WORM("random").put(new Item("chx", 666))).getId();
    }
    
    public Item getRandomItem() {
        return new Item("random-string", new Random().nextInt(300));
    }
    
    // Gibt ein item anhand seiner id zurück
    @Test
    public void get(IItemId id) {
        // wenn nirgends ein item drinn ist wird er auch nichts finden.
        checkExpect(ia1.get(this.getRandomId()), new NoItemResult());
    }
    
    // schreibt ein item in einer der archive
    @Test
    public void put(Item item) {
    }
    
    // hängt eine liste von archiven an.
    @Test
    public void fillData(IArchiveList archives) {
    }
    
    @Test
    public void getRekursiv(IItemId id) {
        // wenn nirgends ein item drinn ist wird er auch nichts finden.
        checkExpect(ia1.get(this.getRandomId()), new NoItemResult());
    }

    @Test
    public void getCache(IItemId id) {
        // wenn nirgends ein item drinn ist wird er auch nichts finden.
        checkExpect(ia1.get(this.getRandomId()), new NoItemResult());
    }
}
