package myarchive;

import org.junit.*;
import wsiarchive.*;

import java.util.Random;



public class PairArchiveAndPutResultListTest extends de.tuebingen.informatik.Test {

    // Erstelle eine neue liste
    IArchiveAndPutResultList ea = new EmptyArchiveAndPutResultList();
    
    // quasie leeres archive mit cache konstrukt
    IArchive a1 = new WORM("string");
    IPutResultList r1 = new EmptyPutResultList();
    IArchiveAndPutResultList ia1 = new PairArchiveAndPutResultList(a1, r1, ea);
    
    // some random generators :)
    public IItemId getRandomId() {
        return ((OKPutResult) new WORM("random").put(new Item("chx", 666))).getId();
    }
    
    public Item getRandomItem() {
        return new Item("random-string", new Random().nextInt(300));
    }
    
    // Gibt ein item anhand seiner id zurück
    @Test
    public void get() {
        // wenn nirgends ein item drinn ist wird er auch nichts finden.
        
        checkExpect(ia1.get(this.getRandomId()), new NoItemResult());

        // nun ein zufälliges item reinschreiben und auslesen
        Item item = this.getRandomItem();
        IItemId id = ((OKPutResult) ia1.put(item)).getId();
        
       checkExpect(ia1.get(id), new ItemResult(item));
       checkExpect(ia1.get(this.getRandomId()), new NoItemResult());
    }
    
    // schreibt ein item in einer der archive
    @Test
    public void put() {
        OKPutResult ir = (OKPutResult) ia1.put(this.getRandomItem());
        checkExpect(ir, new OKPutResult(ir.getId()));
        
        // neue liste...........

        // begrenztes archiv erstellen
        IArchive la2 = new limitedArchive("limited", new WORM("wurm"), 200);
//        IArchive la3 = new limitedArchive("limited", new WORM("wurm"), 400);

        IPutResultList r1 = new EmptyPutResultList();
        IArchiveAndPutResultList ia2 = new PairArchiveAndPutResultList(la2, r1, ea);
        
        checkExpect(ia2.put(new Item("yxcv", 300)), new FullPutResult());
        
        OKPutResult ir2 = (OKPutResult) ia2.put(new Item("asdf", 100));
        checkExpect(ir2, new OKPutResult(ir2.getId()));
        
        checkExpect(ia2.put(new Item("200", 200)), new FullPutResult());  
    }

    // hängt eine liste von archiven an.
    @Test
    public void fillData() {
    }
    
    @Test
    public void getRekursiv() {
        // quasie leeres archive mit cache konstrukt
        IArchive a2 = new WORM("string");
        IPutResultList r2 = new EmptyPutResultList();
        IArchiveAndPutResultList ia2 = new PairArchiveAndPutResultList(a2, r2, ea);
        
        OKPutResult putresult = (OKPutResult) a2.put(new Item("123", 123));
        
        checkExpect(ia2.get(putresult.getId()), new ItemResult(new Item("123", 123)));
    }

    @Test
    public void getCache() {    
        // quasie leeres archive mit cache konstrukt
        IArchive a2 = new WORM("string");
        IPutResultList r2 = new EmptyPutResultList();
        IArchiveAndPutResultList ia2 = new PairArchiveAndPutResultList(a2, r2, ea);
        
        OKPutResult putresult = (OKPutResult) a2.put(new Item("123", 123));
        
        checkExpect(ia2.getCache(putresult.getId()), new NoItemResult());
    }
}
