package myarchive;

import org.junit.*;
import wsiarchive.*;

import java.util.Random;



public class PairPutResultListTest extends de.tuebingen.informatik.Test {

    //Beispiel für eine Liste aus PutResults
    IPutResultList e = new EmptyPutResultList();
    IItemId id = this.getRandomId();
    IPutResultList p1 = new PairPutResultList(
        new OKPutResult(id),
        e);
    
    //Beispiele für ItemIDs
    IItemId id2 = this.getRandomId();
    IPutResultList p2 = new PairPutResultList(
        new OKPutResult(id2),
        p1);
    
    IItemId id3 = this.getRandomId();
    IPutResultList p3 = new PairPutResultList(
        new OKPutResult(id3),
        p2);

    IPutResultList p4 = new PairPutResultList(
        new FullPutResult(),
        p3);
        
    IItemId id5 = this.getRandomId();          
    IPutResultList p5 = new PairPutResultList(
        new OKPutResult(id5),
        p4);
        
    // some random generators :)
    public IItemId getRandomId() {
        return ((OKPutResult) new WORM("random").put(new Item("chx", 666))).getId();
    }
    
    public Item getRandomItem() {
        return new Item("random-string", new Random().nextInt(300));
    }
    
    //das erste Element einer PairPutResultList zurückgeben
    @Test
    public void getFirst() {
        checkExpect(((PairPutResultList) p1).getFirst(), new OKPutResult(this.getRandomId()));
    }
    
    //den Rest einer PairPutResultList zurückgeben
    @Test
    public void getRest() {
        checkExpect(((PairPutResultList) p1).getRest(),e);
    }
    
   //Überprüfen, ob sich eine ItemId in der Liste befindet
   @Test
   public void isItemIdIn() {
       checkExpect(p1.isItemIdIn(id), true);
       checkExpect(p1.isItemIdIn(this.getRandomId()), false);
    }
    
    //Die Anzahl der OKPutResults in einer Liste zählen
    @Test
    public void countOKPutResult() {
        // eine einfache liste
        checkExpect(p1.countOKPutResult(), 1);
        // eine leere liste
        checkExpect(e.countOKPutResult(), 0);
        // eine liste mit einem full
        checkExpect(
        new PairPutResultList(
            new FullPutResult(), e).countOKPutResult(), 0);
        // eine große liste
        checkExpect(p5.countOKPutResult(), 4);
        checkExpect(p3.countOKPutResult(), 3);
        
    }
    
    //eine volle Liste leeren
    @Test
    public void cleanFull() {
        IPutResultList expected = new PairPutResultList(
            new OKPutResult(id),
                new PairPutResultList(
                    new OKPutResult(id2),
                        new PairPutResultList(
                            new OKPutResult(id3),
                                new PairPutResultList(
                                    new OKPutResult(id5), e))));

        checkExpect(p5.cleanFull(), expected);
    }

    //das n-te Item einer Liste zurückgeben
    @Test
    public void getN() {
        IPutResultList my = new PairPutResultList(
            new OKPutResult(id),
                new PairPutResultList(
                    new OKPutResult(id2),
                        new PairPutResultList(
                            new OKPutResult(id3),
                                new PairPutResultList(
                                    new OKPutResult(id5), e))));

        checkExpect(my.getN(1),  new OKPutResult(id2));
        checkExpect(my.getN(3),  new OKPutResult(id5));
    }
    
    @Test
    public void append() {
        checkExpect(p1.append(new PairPutResultList(
                                new OKPutResult(id2), new EmptyPutResultList())),
                    p2);
        checkExpect(new EmptyPutResultList().append(p1), p1);
    }

}
