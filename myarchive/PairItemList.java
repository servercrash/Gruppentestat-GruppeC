package myarchive;

import wsiarchive.*;

// nichtleere Liste von Items
public class PairItemList implements IItemList {
    private Item first;
    private IItemList rest;
    
    public PairItemList(Item first, IItemList rest) {
        this.first = first;
        this.rest = rest;
    }
    
    // erstes Element extrahieren
    public Item getFirst() {
        return this.first;
    }
    
    // Rest extrahieren
    public IItemList getRest() {
        return this.rest;
    }

    // in WSI-Itemliste umwandeln
    public wsiarchive.IItemList toWSIItemList() {
       return new wsiarchive.PairItemList(this.first,
                                           this.rest.toWSIItemList());                                           
    }

    // alle Items in das Archiv schreiben
    public IPutResultList putAll(IArchive archive) {
        return new PairPutResultList(archive.put(this.first), 
                                     this.rest.putAll(archive));
    }
    
    
    // hängt items an die liste hinten an
    public IItemList append(IItemList items) {
        return new PairItemList(this.first, this.rest.append(items));
    }
    
    //Prüft ob die Liste das Quorum erfüllt
    public IItemList meetsQuorum(int quorum){
        if (this.count(this.first) >= quorum){
            return new PairItemList(this.first, this.rest.deleteItem(this.first).meetsQuorum(quorum));
        } else {
            return this.rest.deleteItem(this.first).meetsQuorum(quorum);
        }
    }
    
    public int count(Item item){
        if (this.first.equals(item)) {
            return 1 + this.rest.count(item);
        } else {
            return this.rest.count(item);
        }
    }
    
    public IItemList deleteItem(Item item){
        if (this.first.equals(item)) {
            return rest.deleteItem(item);
        } else {
            return new PairItemList(this.first, rest.deleteItem(item));
        }
    }
    // 1 4 | 2
    // 
    public IItemList antiListe(IItemList items) {
        if (items instanceof EmptyItemList) {
            return this;
        }
        else {
            Item first = ((PairItemList) items).getFirst();
            if (this.count(first) > 0) {
                IItemList itemlist = this.deleteItem(first);
                items = items.deleteItem(first);
                return itemlist.antiListe(items);
                //return this.antiListe(this.items.deleteItem(items.getFirst()));
            }
            else {
                return new PairItemList(
                    this.first,
                    this.rest.antiListe(items)
                );
            }
        }
    }

}
