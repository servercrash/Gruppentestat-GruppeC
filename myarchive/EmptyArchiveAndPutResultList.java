package myarchive;

import wsiarchive.*;

//eine leere ArchiveAndPutResultList
public class EmptyArchiveAndPutResultList implements IArchiveAndPutResultList {
    // Gibt ein item anhand seiner id zurück
    public IGetResult get(IItemId id) {
        return new NoItemResult();
    }
    
    // schreibt ein item in einer der archive
    public IPutResult put(Item item) {
        return new FullPutResult();
    }
    
    
    // schreibt mehrere items
    public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items) {
    //    throw new AssertionError("man kann nicht mehrere items in eine leere liste schreiben");
        return new wsiarchive.EmptyPutResultList();
    }
    
    // hängt eine liste von archiven an.
    public IArchiveAndPutResultList fillData(IArchiveList archives) {
        if (archives instanceof EmptyArchiveList) {
            return new EmptyArchiveAndPutResultList();
        }
        else {
            return new PairArchiveAndPutResultList(
                archives.getFirst(),
                new EmptyPutResultList(),
                this.fillData(archives.getRest())
                );
        }
    }
    
    // führt get auf jedes teilarchiv aus
    public IGetResult getRekursiv(IItemId id) {
        return new NoItemResult();
    }
    
    
    // führt get nur mithilfe des caches aus
    public IGetResult getCache(IItemId id) {
        return new NoItemResult();
    }
    
        
    // schreibt ein item in alle teilarchive und liefert die liste er Putresults zurück
    public IPutResultList putAll(Item item) {
        return new EmptyPutResultList();
    }
    
    //gibt das die Items im RedundantArchiv in einer GetResultList zurück
    public IGetResult getRedundant(IItemId id) {
        return new NoItemResult();
    }
    
    
    // liefert alle items die geschrieben werden könenn
    public IItemList getPutAble(IItemList items) {
        return new EmptyItemList();
    }

    // liefert alle items die nicht geschrieben werden können
    public IItemList getNotPutAble(IItemList items) {
        return items;
    }
            
}
