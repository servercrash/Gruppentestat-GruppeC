package myarchive;

import wsiarchive.*;

// Archiv, das nach Prädikaten entscheidet, in welches Teilarchiv geschrieben wird.
public class SemanticArchive implements IArchive, IMyArchive {
    private String name; // Name des Archives
    private IArchiveAndPredicateList archivesAndPredicates; // Paar aus teilarchiv und item-prädikat
    private IArchive standard; // standardArchiv


    // Die Archive in archivesAndPredicates werden der Reihe nach durchprobiert;
    // wenn kein Prädikat passt, wird in das Archiv standard geschrieben.
    public SemanticArchive(String name, IArchiveAndPredicateList archivesAndPredicates, IArchive standard) {
        this.name = name;
        this.archivesAndPredicates = archivesAndPredicates;
        this.standard = standard;
    }

    // Name des Archivs liefern
    public String getName() {
        return this.name;
    }

    // Item ins Archiv schreiben
    public wsiarchive.IPutResult put(Item item) {
        IPutResult result =  this.archivesAndPredicates.put(item);
        if (result instanceof FullPutResult) {
            return this.standard.put(item);
        }
        else {
            return result;
        }
    }

    // Mehrere Items ins Archiv schreiben
    // @TODO PutMultiple funktioniert noch nicht so wie es soll
    public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items) {
        if (items instanceof wsiarchive.EmptyItemList) {
            return new wsiarchive.EmptyPutResultList();
        }
        else {
            myarchive.PairItemList it1 = (myarchive.PairItemList) items.toMyItemList();
            return this.archivesAndPredicates.putMultiple((this.getPutAble(it1).toWSIItemList()));
        }
    }

    // Item aus Archiv auslesen
    public wsiarchive.IGetResult get(IItemId id) {
        return this.archivesAndPredicates.get(id);
    }
    
        // liefert alle items die geschrieben werden können
    public IItemList getPutAble(IItemList items) {
        return this.archivesAndPredicates.getPutAble(items).append
        (((IMyArchive) this.standard).getPutAble(this.archivesAndPredicates.getNotPutAble(items)));
    }
    
    // liefert alle items die nicht geschrieben werden können
    public IItemList getNotPutAble(IItemList items) {
    //    return this.archivesAndPredicates.getNotPutAble(items).append
    //    (((IMyArchive) this.standard).getNotPutAble(this.archivesAndPredicates.getPutAble(items)));
        return items.antiListe(this.getPutAble(items));
    }
 /*   public IItemList getNotReallyPutAble(IItemList items, IItemList putablelist) {
        if (putablelist instanceof EmptyItemList) {
            return items;
        }
        else {
            Item item = ((PairItemList) putablelist).getFirst();
            if (((PairItemList) items).getFirst() == item) {
                return ((PairItemList) items).getRest();
            }
            else {
            }
        }
    }*/
            
    
    


}
