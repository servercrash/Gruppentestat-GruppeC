package myarchive;

import wsiarchive.*;


// Redundantes Archiv, das in mehrere Unterarchive gleichzeitig schreibt
public class RedundantArchive implements IArchive {
    private String name; // Name des Archives
    private IArchiveAndPutResultList data;
    private int quorum; // Quorum

    // Das Quorum sagt, auf wievielen Unterarchiven der Schreibvorgang
    // erfolgreich sein muss, damit der Gesamtschreibvorgang erfolgreich ist.
    public RedundantArchive(String name, IArchiveList archives, int quorum) {
        this.name = name;
        this.quorum = quorum;
        this.data = new EmptyArchiveAndPutResultList();
        this.data = this.data.fillData(archives); 
    }
    
        // Name des Archivs liefern
    public String getName() {
        return this.name;
    }
    
    // Quorum auslesen
    public int getQuorum() {
        return this.quorum;
    }

    // Item ins Archiv schreiben
    public wsiarchive.IPutResult put(Item item) {
        IPutResultList putresult = this.data.putAll(item);
        if (this.countOKPutResult(putresult) >= this.quorum) {
             new OKPutResult(ID???);
        }
        else {
            return new FullPutResult();
        }
    }
    
    // Mehrere Items ins Archiv schreiben
    public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items) {
        return null;
    }
    
    // Item aus Archiv auslesen
    public wsiarchive.IGetResult get(IItemId id) {
        return null;
    }

}
