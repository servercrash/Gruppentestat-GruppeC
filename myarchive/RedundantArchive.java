package myarchive;

import wsiarchive.*;


// Redundantes Archiv, das in mehrere Unterarchive gleichzeitig schreibt
public class RedundantArchive implements IArchive {
    private String name; // Name des Archives
    private IArchiveAndPutResultList data;
    private int quorum; // Quorum

    // Das Quorum sagt, auf wievielen Unterarchiven der Schreibvorgang
    // erfolgreich sein muss, damit der Gesamtschreibvorgang erfolgreich ist.
    public RedundantArchive(String name, IArchiveList archives, int quorum) {
        this.name = name;
        this.quorum = quorum;
        this.data = new EmptyArchiveAndPutResultList();
        this.data = this.data.fillData(archives); 
    }
    
        // Name des Archivs liefern
    public String getName() {
        return this.name;
    }
    
    // Quorum auslesen
    public int getQuorum() {
        return this.quorum;
    }

    // Item ins Archiv schreiben
    public wsiarchive.IPutResult put(Item item) {
        IPutResultList putresult = this.data.putAll(item);
        putresult = putresult.cleanFull();
        if (putresult.countOKPutResult() >= this.quorum) {
            IItemId id = new RedundantItemID(putresult);
            return new OKPutResult(id);
        }
        else {
            return new FullPutResult();
        }
    }
    
    // Mehrere Items ins Archiv schreiben
    // @TODO putMultiple funktioniert noch nicht so wie es soll
    public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items) {
        // rekursiv put ausf√ºhren
        if (items instanceof wsiarchive.EmptyItemList) {
            return new wsiarchive.EmptyPutResultList();
        }
        else {
            wsiarchive.PairItemList it1 = (wsiarchive.PairItemList) items;
            return new wsiarchive.PairPutResultList(
                this.put(it1.getFirst()),
                this.putMultiple(it1.getRest())
            );
        }
    }
    
    // Item aus Archiv auslesen
    public wsiarchive.IGetResult get(IItemId id) {
        RedundantItemID myid = (RedundantItemID) id;
        IPutResultList putresult = myid.getList();
        OKPutResult intern_result = (OKPutResult) putresult.getRandom();
        IGetResult result = this.data.get(intern_result.getId());
        return result;
    }

}
