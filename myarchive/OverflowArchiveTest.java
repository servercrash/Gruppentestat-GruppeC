package myarchive;


import org.junit.*;
import wsiarchive.*;



public class OverflowArchiveTest extends de.tuebingen.informatik.Test {

    //Beispiele für Teilarchive
    TestArchive la1 = new TestArchive("t1", new limitedArchive("Teilarchiv 1", new WORM("Worm"), 200));
    TestArchive la2 = new TestArchive("t2", new limitedArchive("Teilarchiv 2", new WORM("Worm"), 300));
    TestArchive la3 = new TestArchive("t3", new limitedArchive("Teilarchiv 3", new WORM("Worm"), 200));

    //Beispiel für ein overflow-archive
    IArchiveList al1 = new PairArchiveList(la1, new PairArchiveList(la2, new PairArchiveList(la3, new EmptyArchiveList())));
    OverflowArchive oa1 = new OverflowArchive("Test 1", al1);
    
    //Beispiele für Items
    Item i1 = new Item("Item 1", 200);
    Item i2 = new Item("Item 2", 300);
    Item i3 = new Item("Item 3", 400);
    Item i4 = new Item("Item 4", 100);
    
    //Liste aus Items
    IItemList il2 = new PairItemList(i1, new PairItemList(i2, new PairItemList(i3, new PairItemList(i4, new EmptyItemList()))));
    IItemList il1 = new PairItemList(i1, new PairItemList(i2, new EmptyItemList()));
    IItemList il3 = new PairItemList(i1, new EmptyItemList());
    IItemList il4 = new PairItemList(i2, new EmptyItemList());
    IItemList il5 = new PairItemList(i4, new PairItemList(i4, new EmptyItemList()));
    IItemList il6 = new PairItemList(i1, new PairItemList(i4, new EmptyItemList()));
    
    //den Namen einer Liste zurückliefern
    @Test
    public void getNameTest(){
        checkExpect(oa1.getName(), "Test 1");
    }
    
    // Ist das Resultat vom typ OKPutResult
    public boolean isOKPutResult(IPutResult result) {
        return (result instanceof OKPutResult);
    }
    
    @Test
    public void getPutAble() {
        checkExpect(la1.getPutAble(il3), il3);
        checkExpect(la2.getPutAble(il3), il3);
        checkExpect(la1.getPutAble(il4), new EmptyItemList());
        checkExpect(la2.getPutAble(il4), il4);
        checkExpect(la1.getPutAble(il5), il5);
        checkExpect(la1.getPutAble(il6), il3);
        checkExpect(la2.getPutAble(il6), il6);
        
        checkExpect(oa1.getPutAble(il2), new PairItemList(i1, new PairItemList(i2, new PairItemList(i4, new EmptyItemList()))));
    }

    @Test
    public void getNotPutAble() {
        checkExpect(la1.getNotPutAble(il2), new PairItemList(i2, new PairItemList(i3, new PairItemList(i4, new EmptyItemList()))));
        checkExpect(oa1.getNotPutAble(il2), new PairItemList(i3, new EmptyItemList()));
        checkExpect(oa1.getNotPutAble(il1), new EmptyItemList());
    }
        
    
    //Items in ein Archiv speichern
    @Test
    public void putTest(){ 
        IPutResult r1 = oa1.put(i1);
        checkExpect(this.isOKPutResult(r1), true);
        OKPutResult id1 = (OKPutResult) r1;
        checkExpect(id1, new OKPutResult(id1.getId()));
        
        OKPutResult id2 = (OKPutResult) oa1.put(i2);
        checkExpect(id2, new OKPutResult(id2.getId()));
        
        checkExpect(oa1.put(i3), new FullPutResult());
        
        OKPutResult id4 = (OKPutResult) oa1.put(i4);
        checkExpect(id4, new OKPutResult(id4.getId()));
        
        checkExpect(la1.get(id1.getId()), new ItemResult(i1));
        checkExpect(la1.get(id2.getId()), new NoItemResult());
        checkExpect(la2.get(id2.getId()), new ItemResult(i2));
        checkExpect(la1.get(id4.getId()), new NoItemResult());
        checkExpect(la2.get(id4.getId()), new NoItemResult());
        checkExpect(la3.get(id4.getId()), new ItemResult(i4));
    }
    
    
    //mehrere Items in ein Archiv speichern
    @Test
    public void putMultipleTest() {
    }
    
    @Test
    public void putMultipleTest2() {
        // eine einfache Liste putMultiplen
        oa1.putMultiple(new PairItemList(i1, new EmptyItemList()).toWSIItemList());
        
        // es sollte einmal putMultiple bei la1 ein putMultiple ausgeführt werden
        checkExpect(la1.getCountPutMultiple(), 1);
    }
    
    
}
