package myarchive;

import wsiarchive.*;

// nichtleere Liste von Archive/Prädikat-Paaren
public class PairArchiveAndPredicateList implements IArchiveAndPredicateList {
    private IItemPredicate predicate;
    private IArchive archive;
    private IPutResultList resultlist;
    private IArchiveAndPredicateList rest;
    
    public PairArchiveAndPredicateList(IItemPredicate predicate, IArchive archive,
                                       IArchiveAndPredicateList rest) {
        this.predicate = predicate;
        this.archive = archive;
        this.rest = rest;
        this.resultlist = new EmptyPutResultList();
    }
    
        
    // Ein Item in das ArchiveAndPredicateList schreiben.
    public IPutResult put(Item item) {
        if (this.predicate.matches(item)) {
            IPutResult putresult = this.archive.put(item);
            if (putresult instanceof OKPutResult) {
                this.resultlist.addPutResult(putresult);
                return putresult;
            }
            else {
                return this.rest.put(item);
            }
        }
        else {
            return this.rest.put(item);
        }
    }
    //gibt Items zurück
    public IGetResult get(IItemId id) {
        // Falls wir ein resultat m
        IGetResult getresult = this.getCache(id);
        if (getresult instanceof NoItemResult) {
            return this.getRekursiv(id);
        }
        else {
            return getresult;
        }
    }
    
    //gibt das die Items im RedundantArchiv in einer GetResultList zurück
    public IGetResult getRedundant(IItemId id) {
        // Falls wir ein resultat m
        IGetResult getresult = this.getCache(id);
        if (getresult instanceof NoItemResult) {
            return this.rest.getRedundant(id);
        }
        else {
            return getresult;
        }
    }
 
    // Versucht ein item ohne benutzern des caches zu bekommen
    public IGetResult getRekursiv(IItemId id) {
        IGetResult getresult = this.archive.get(id);
        if (getresult instanceof FullPutResult) {
            return this.rest.getRekursiv(id);
        }
        else {
            // schreibt die id in den cache, da es ja dort vorhanden ist
            this.resultlist.addPutResult(new OKPutResult(id));
            return getresult;
        }
    }

    // Versucht ein item mit Benutzen des Caches zu bekommen
    public IGetResult getCache(IItemId id) {
        System.out.println(this.resultlist.isItemIdIn(id));
        if (this.resultlist.isItemIdIn(id)) {
            return this.archive.get(id);
        }
        else {
            return this.rest.getCache(id);
        }
    }

    
    
}
