package myarchive;


import wsiarchive.*;

// Liste von archiv mit dem resultlistCache
public class PairArchiveAndPutResultList implements IArchiveAndPutResultList {
    IArchive archive; // ein archiv
    IPutResultList resultlist; // quasie der Cache
    IArchiveAndPutResultList rest; // rest der liste

    PairArchiveAndPutResultList(IArchive archive, IPutResultList resultlist, IArchiveAndPutResultList rest) {
        this.archive = archive;
        this.resultlist = resultlist;
        this.rest = rest;
    }
    
    // versucht ein item in ein archiv oder den rest zu schreiben
    public IPutResult put(Item item) {
        IPutResult putresult = this.archive.put(item);
        if (putresult instanceof FullPutResult) {
            return this.rest.put(item);
        }
        else {
            // Aktualisiere den Cache
            this.resultlist.addPutResult(putresult);
            return putresult;
        }
    }
    
    // schreibt ein item in alle teilarchive und liefert die liste er Putresults zurück
    public IPutResultList putAll(Item item) {
        return new PairPutResultList(
            this.archive.put(item),
            this.rest.putAll(item)
        );
    }

    public IGetResult get(IItemId id) {
        // Falls wir ein resultat m
        IGetResult getresult = this.getCache(id);
        if (getresult instanceof NoItemResult) {
            return this.getRekursiv(id);
        }
        else {
            return getresult;
        }
    }
 
    // Versucht ein item ohne benutzern des caches zu bekommen
    public IGetResult getRekursiv(IItemId id) {
        IGetResult getresult = this.archive.get(id);
        if (getresult instanceof FullPutResult) {
            return this.rest.getRekursiv(id);
        }
        else {
            // schreibt die id in den cache, da es ja dort vorhanden ist
            this.resultlist.addPutResult(new OKPutResult(id));
            return getresult;
        }
    }

    // Versucht ein item mit Benutzen des Caches zu bekommen
    public IGetResult getCache(IItemId id) {
        System.out.println(this.resultlist.isItemIdIn(id));
        if (this.resultlist.isItemIdIn(id)) {
            return this.archive.get(id);
        }
        else {
            return this.rest.getCache(id);
        }
    }

    // hängt eine liste von archiven an.
    public IArchiveAndPutResultList fillData(IArchiveList archives) {
        if (archives instanceof EmptyArchiveList) {
            return new EmptyArchiveAndPutResultList();
        }
        else {
            return new PairArchiveAndPutResultList(
                archives.getFirst(),
                new EmptyPutResultList(),
                this.fillData(archives.getRest())
                );
            }
    }
}
