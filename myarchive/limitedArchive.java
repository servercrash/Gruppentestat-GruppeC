package myarchive;
import wsiarchive.*;


//ein begrenztes Archiv
public class limitedArchive implements IArchive, IMyArchive {
    private String name; //Name des Archivs
    private IArchive archive;
    private int maxSize; //maximale Speicherkapazität
    private int currentSize; //momentan belegter Speicher
    
    limitedArchive(String name, IArchive archive, int maxSize) {
        this.name = name;
        this.archive = archive;
        this.maxSize = maxSize;
        this.currentSize = 0;
    }
    
    
    // Name des Archivs liefern
    public String getName() {
        return this.name;
    }
    
    // Gibt den verbleibenenden Speicher zurück
    public int getFree() {
        return this.maxSize - this.currentSize;
    }

    // Item ins Archiv schreiben
    public wsiarchive.IPutResult put(Item item) {
        // Wenn das neue Item die maximale Kapazität überschreitet.
        // dann mach nichts.
        if ((item.getSize() + this.currentSize) <= this.maxSize) {
            // Aktuell verfügbarer speicher aktualisieren
            this.currentSize = this.currentSize + item.getSize();
            return this.archive.put(item);
        }
        else {
            return new FullPutResult();
        }
    }
   
    
    // Mehrere Items ins Archiv schreiben
    public wsiarchive.IPutResultList putMultiple(wsiarchive.IItemList items) {
        if (items instanceof wsiarchive.EmptyItemList) {
            return new wsiarchive.EmptyPutResultList();
        }
        else {
            wsiarchive.PairItemList items1 = (wsiarchive.PairItemList) items;
            IItemList items2 = this.getPutable(items1.toMyItemList());
            return this.archive.putMultiple(items2.toWSIItemList());
        }
    }
    
    // gibt die items zurück die reinpassen
    public IItemList getPutable(IItemList items) {
        return this.getPutAbleHelper(items, this.maxSize - this.currentSize);
    }
    
    private IItemList getPutAbleHelper(IItemList items, int remainingSize) {
        if (items instanceof EmptyItemList) {
            return new EmptyItemList();
        }
        else {
            if (((PairItemList) items).getFirst().getSize() <= remainingSize) {
                return new PairItemList(
                    ((PairItemList) items).getFirst(),
                    this.getPutAbleHelper(((PairItemList) items).getRest(), remainingSize - ((PairItemList) items).getFirst().getSize())
                );
            }
            else {
                return this.getPutAbleHelper(((PairItemList) items).getRest(), remainingSize);
            }
        }
    }
        
        
    
    // Item aus Archiv auslesen
    public wsiarchive.IGetResult get(IItemId id) {
        return this.archive.get(id);
    }
}
